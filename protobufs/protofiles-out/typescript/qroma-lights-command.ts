// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-lights-command.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { QromaLightsConfig } from "./qroma-lights-types";
/**
 * @generated from protobuf message QpmCommand_SetQromaStripName
 */
export interface QpmCommand_SetQromaStripName {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
// message QromaPointManagementCommand {//   string instanceId = 1;//   oneof qpmCommand {//     QpmCommand_SetQromaStripName setQromaPointName = 2;//   }// }

/**
 * @generated from protobuf message SetQromaStripDeviceName
 */
export interface SetQromaStripDeviceName {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message UseCurrentSetupOnStartup
 */
export interface UseCurrentSetupOnStartup {
    /**
     * @generated from protobuf field: uint32 delayInMs = 1;
     */
    delayInMs: number;
}
// message FactoryResetQromaDevice { }

/**
 * @generated from protobuf message QromaLightsCommand
 */
export interface QromaLightsCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "noArgCommand";
        /**
         * @generated from protobuf field: NoArgCommands_QromaLightsCommand noArgCommand = 1;
         */
        noArgCommand: NoArgCommands_QromaLightsCommand;
    } | {
        oneofKind: "setQromaStripDeviceName";
        /**
         * @generated from protobuf field: SetQromaStripDeviceName setQromaStripDeviceName = 2;
         */
        setQromaStripDeviceName: SetQromaStripDeviceName; // UseCurrentSetupOnStartup useCurrentSetupOnStartup = 2;        // RestartQromaDevice restartQromaDevice = 3;        // FactoryResetQromaDevice factoryResetQromaDevice = 4;        // SetQromaLogLevel setQromaLogLevel = 3;        // SetQromaDebugCommMode setQromaDebugCommMode = 4;        // SetQromaCommConfigCommand setQromaCommConfigCommand = 5;        // RequestQromaLightsConfig requestQromaLightsConfig = 8;    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QromaLightsResponse
 */
export interface QromaLightsResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "qromaLightsConfigResponse";
        /**
         * @generated from protobuf field: QromaLightsConfig qromaLightsConfigResponse = 1;
         */
        qromaLightsConfigResponse: QromaLightsConfig;
    } | {
        oneofKind: undefined;
    };
}
// message RestartQromaDevice { }

// message SetQromaLogLevel {//   Qroma_LogLevel logLevel = 1;// }

// message SetQromaDebugCommMode {//   Qroma_DebugCommMode debugCommMode = 1;// }

// message SetQromaCommTxIntervalInMs {//   uint32 txIntervalInMs = 1;// }

// message SetQromaCommMaxTxMessageSizeInBytes {//   uint32 maxTxMessageSizeInBytes = 1;// }

// message SetQromaCommConfigCommand {//   oneof setConfigValue {//     SetQromaCommTxIntervalInMs setQromaCommTxIntervalInMs = 1;//     SetQromaCommMaxTxMessageSizeInBytes setQromaCommMaxTxMessageSizeInBytes = 2; //   }// }

// message RequestQromaLightsConfig {//   uint32 placeholder = 1;// }

/**
 * not sure how I feel about this, but let's try it out, at least
 *
 * @generated from protobuf enum NoArgCommands_QromaLightsCommand
 */
export enum NoArgCommands_QromaLightsCommand {
    /**
     * @generated from protobuf enum value: NacQlc_NotSet = 0;
     */
    NacQlc_NotSet = 0,
    /**
     * @generated from protobuf enum value: NacQlc_UseCurrentSetupOnStartup = 1;
     */
    NacQlc_UseCurrentSetupOnStartup = 1,
    /**
     * @generated from protobuf enum value: NacQlc_RestartQromaDevice = 2;
     */
    NacQlc_RestartQromaDevice = 2,
    /**
     * @generated from protobuf enum value: NacQlc_FactoryResetQromaDevice = 3;
     */
    NacQlc_FactoryResetQromaDevice = 3,
    /**
     * @generated from protobuf enum value: NacQlc_RequestQromaLightsConfig = 4;
     */
    NacQlc_RequestQromaLightsConfig = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class QpmCommand_SetQromaStripName$Type extends MessageType<QpmCommand_SetQromaStripName> {
    constructor() {
        super("QpmCommand_SetQromaStripName", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QpmCommand_SetQromaStripName>): QpmCommand_SetQromaStripName {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QpmCommand_SetQromaStripName>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QpmCommand_SetQromaStripName): QpmCommand_SetQromaStripName {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QpmCommand_SetQromaStripName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QpmCommand_SetQromaStripName
 */
export const QpmCommand_SetQromaStripName = new QpmCommand_SetQromaStripName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaStripDeviceName$Type extends MessageType<SetQromaStripDeviceName> {
    constructor() {
        super("SetQromaStripDeviceName", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetQromaStripDeviceName>): SetQromaStripDeviceName {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetQromaStripDeviceName>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaStripDeviceName): SetQromaStripDeviceName {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaStripDeviceName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaStripDeviceName
 */
export const SetQromaStripDeviceName = new SetQromaStripDeviceName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseCurrentSetupOnStartup$Type extends MessageType<UseCurrentSetupOnStartup> {
    constructor() {
        super("UseCurrentSetupOnStartup", [
            { no: 1, name: "delayInMs", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UseCurrentSetupOnStartup>): UseCurrentSetupOnStartup {
        const message = { delayInMs: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseCurrentSetupOnStartup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseCurrentSetupOnStartup): UseCurrentSetupOnStartup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 delayInMs */ 1:
                    message.delayInMs = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseCurrentSetupOnStartup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 delayInMs = 1; */
        if (message.delayInMs !== 0)
            writer.tag(1, WireType.Varint).uint32(message.delayInMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UseCurrentSetupOnStartup
 */
export const UseCurrentSetupOnStartup = new UseCurrentSetupOnStartup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaLightsCommand$Type extends MessageType<QromaLightsCommand> {
    constructor() {
        super("QromaLightsCommand", [
            { no: 1, name: "noArgCommand", kind: "enum", oneof: "command", T: () => ["NoArgCommands_QromaLightsCommand", NoArgCommands_QromaLightsCommand] },
            { no: 2, name: "setQromaStripDeviceName", kind: "message", oneof: "command", T: () => SetQromaStripDeviceName }
        ]);
    }
    create(value?: PartialMessage<QromaLightsCommand>): QromaLightsCommand {
        const message = { command: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaLightsCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaLightsCommand): QromaLightsCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* NoArgCommands_QromaLightsCommand noArgCommand */ 1:
                    message.command = {
                        oneofKind: "noArgCommand",
                        noArgCommand: reader.int32()
                    };
                    break;
                case /* SetQromaStripDeviceName setQromaStripDeviceName */ 2:
                    message.command = {
                        oneofKind: "setQromaStripDeviceName",
                        setQromaStripDeviceName: SetQromaStripDeviceName.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaStripDeviceName)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaLightsCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* NoArgCommands_QromaLightsCommand noArgCommand = 1; */
        if (message.command.oneofKind === "noArgCommand")
            writer.tag(1, WireType.Varint).int32(message.command.noArgCommand);
        /* SetQromaStripDeviceName setQromaStripDeviceName = 2; */
        if (message.command.oneofKind === "setQromaStripDeviceName")
            SetQromaStripDeviceName.internalBinaryWrite(message.command.setQromaStripDeviceName, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaLightsCommand
 */
export const QromaLightsCommand = new QromaLightsCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaLightsResponse$Type extends MessageType<QromaLightsResponse> {
    constructor() {
        super("QromaLightsResponse", [
            { no: 1, name: "qromaLightsConfigResponse", kind: "message", oneof: "response", T: () => QromaLightsConfig }
        ]);
    }
    create(value?: PartialMessage<QromaLightsResponse>): QromaLightsResponse {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaLightsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaLightsResponse): QromaLightsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaLightsConfig qromaLightsConfigResponse */ 1:
                    message.response = {
                        oneofKind: "qromaLightsConfigResponse",
                        qromaLightsConfigResponse: QromaLightsConfig.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).qromaLightsConfigResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaLightsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaLightsConfig qromaLightsConfigResponse = 1; */
        if (message.response.oneofKind === "qromaLightsConfigResponse")
            QromaLightsConfig.internalBinaryWrite(message.response.qromaLightsConfigResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaLightsResponse
 */
export const QromaLightsResponse = new QromaLightsResponse$Type();
