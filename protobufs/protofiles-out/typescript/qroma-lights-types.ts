// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-lights-types.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message QromaStripColor
 */
export interface QromaStripColor {
    /**
     * @generated from protobuf field: uint32 red = 1;
     */
    red: number;
    /**
     * @generated from protobuf field: uint32 green = 2;
     */
    green: number;
    /**
     * @generated from protobuf field: uint32 blue = 3;
     */
    blue: number;
}
/**
 * @generated from protobuf message QromaStrip_WS2812FX_Animation
 */
export interface QromaStrip_WS2812FX_Animation {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_Pattern pattern = 1;
     */
    pattern: QromaStrip_WS2812FX_Pattern;
    /**
     * @generated from protobuf field: uint32 speed = 2;
     */
    speed: number; // 2-65535
    /**
     * @generated from protobuf field: QromaStripColor color1 = 3;
     */
    color1?: QromaStripColor;
    /**
     * @generated from protobuf field: QromaStripColor color2 = 4;
     */
    color2?: QromaStripColor;
    /**
     * @generated from protobuf field: QromaStripColor color3 = 5;
     */
    color3?: QromaStripColor;
    /**
     * @generated from protobuf field: bool reversed = 6;
     */
    reversed: boolean;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_FadeSpeed fadeSpeed = 7;
     */
    fadeSpeed: QromaStrip_WS2812FX_FadeSpeed;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_PixelsSize size = 8;
     */
    size: QromaStrip_WS2812FX_PixelsSize;
    /**
     * @generated from protobuf field: bool useGammaCorrection = 9;
     */
    useGammaCorrection: boolean;
}
/**
 * @generated from protobuf message QromaStrip_WS2812FX_IoSettings
 */
export interface QromaStrip_WS2812FX_IoSettings {
    /**
     * @generated from protobuf field: uint32 pin = 1;
     */
    pin: number;
    /**
     * @generated from protobuf field: uint32 ledCount = 2;
     */
    ledCount: number;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_NeoPixelRgbOrder neoPixelRgbOrder = 3;
     */
    neoPixelRgbOrder: QromaStrip_WS2812FX_NeoPixelRgbOrder;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_NeoPixelTxRate neoPixelTxRate = 4;
     */
    neoPixelTxRate: QromaStrip_WS2812FX_NeoPixelTxRate;
}
/**
 * @generated from protobuf message QromaStrip_WS2812FX_Segment
 */
export interface QromaStrip_WS2812FX_Segment {
    /**
     * @generated from protobuf field: uint32 startIndex = 1;
     */
    startIndex: number;
    /**
     * @generated from protobuf field: uint32 endIndex = 2;
     */
    endIndex: number;
}
/**
 * @generated from protobuf message QromaStrip_WS2812FX_SegmentsDefinition
 */
export interface QromaStrip_WS2812FX_SegmentsDefinition {
    /**
     * @generated from protobuf field: uint32 brightness = 1;
     */
    brightness: number;
    /**
     * @generated from protobuf field: uint32 numSegments = 2;
     */
    numSegments: number;
    /**
     * @generated from protobuf field: uint32 maxNumSegments = 3;
     */
    maxNumSegments: number;
    /**
     * @generated from protobuf field: repeated QromaStrip_WS2812FX_Segment segments = 4;
     */
    segments: QromaStrip_WS2812FX_Segment[];
}
/**
 * @generated from protobuf message QromaStrip_WS2812FX_StartupAnimations
 */
export interface QromaStrip_WS2812FX_StartupAnimations {
    /**
     * @generated from protobuf field: uint32 startupDelayInMs = 1;
     */
    startupDelayInMs: number;
    /**
     * @generated from protobuf field: repeated QromaStrip_WS2812FX_Animation segmentAnimations = 2;
     */
    segmentAnimations: QromaStrip_WS2812FX_Animation[];
}
/**
 * @generated from protobuf message QromaStripConfig
 */
export interface QromaStripConfig {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_IoSettings ioSettings = 2;
     */
    ioSettings?: QromaStrip_WS2812FX_IoSettings;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_SegmentsDefinition segmentsDefinition = 3;
     */
    segmentsDefinition?: QromaStrip_WS2812FX_SegmentsDefinition;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StartupAnimations startupAnimations = 4;
     */
    startupAnimations?: QromaStrip_WS2812FX_StartupAnimations; // QromaStrip_WS2812FX_LedsConfig ledsConfig = 3;
    // uint32 brightness = 4;  // 0-255 - or should this be per segment?
}
/**
 * @generated from protobuf message QromaLightsConfig
 */
export interface QromaLightsConfig {
    /**
     * @generated from protobuf field: QromaStripConfig qromaStrip1Config = 1;
     */
    qromaStrip1Config?: QromaStripConfig;
    /**
     * @generated from protobuf field: QromaStripConfig qromaStrip2Config = 2;
     */
    qromaStrip2Config?: QromaStripConfig;
}
/**
 * @generated from protobuf enum QromaStrip_WS2812FX_Pattern
 */
export enum QromaStrip_WS2812FX_Pattern {
    /**
     * @generated from protobuf enum value: QSP_STATIC = 0;
     */
    QSP_STATIC = 0,
    /**
     * @generated from protobuf enum value: QSP_BLINK = 1;
     */
    QSP_BLINK = 1,
    /**
     * @generated from protobuf enum value: QSP_BREATH = 2;
     */
    QSP_BREATH = 2,
    /**
     * @generated from protobuf enum value: QSP_COLOR_WIPE = 3;
     */
    QSP_COLOR_WIPE = 3,
    /**
     * @generated from protobuf enum value: QSP_COLOR_WIPE_INV = 4;
     */
    QSP_COLOR_WIPE_INV = 4,
    /**
     * @generated from protobuf enum value: QSP_COLOR_WIPE_REV = 5;
     */
    QSP_COLOR_WIPE_REV = 5,
    /**
     * @generated from protobuf enum value: QSP_COLOR_WIPE_REV_INV = 6;
     */
    QSP_COLOR_WIPE_REV_INV = 6,
    /**
     * @generated from protobuf enum value: QSP_COLOR_WIPE_RANDOM = 7;
     */
    QSP_COLOR_WIPE_RANDOM = 7,
    /**
     * @generated from protobuf enum value: QSP_RANDOM_COLOR = 8;
     */
    QSP_RANDOM_COLOR = 8,
    /**
     * @generated from protobuf enum value: QSP_SINGLE_DYNAMIC = 9;
     */
    QSP_SINGLE_DYNAMIC = 9,
    /**
     * @generated from protobuf enum value: QSP_MULTI_DYNAMIC = 10;
     */
    QSP_MULTI_DYNAMIC = 10,
    /**
     * @generated from protobuf enum value: QSP_RAINBOW = 11;
     */
    QSP_RAINBOW = 11,
    /**
     * @generated from protobuf enum value: QSP_RAINBOW_CYCLE = 12;
     */
    QSP_RAINBOW_CYCLE = 12,
    /**
     * @generated from protobuf enum value: QSP_SCAN = 13;
     */
    QSP_SCAN = 13,
    /**
     * @generated from protobuf enum value: QSP_DUAL_SCAN = 14;
     */
    QSP_DUAL_SCAN = 14,
    /**
     * @generated from protobuf enum value: QSP_FADE = 15;
     */
    QSP_FADE = 15,
    /**
     * @generated from protobuf enum value: QSP_THEATER_CHASE = 16;
     */
    QSP_THEATER_CHASE = 16,
    /**
     * @generated from protobuf enum value: QSP_THEATER_CHASE_RAINBOW = 17;
     */
    QSP_THEATER_CHASE_RAINBOW = 17,
    /**
     * @generated from protobuf enum value: QSP_RUNNING_LIGHTS = 18;
     */
    QSP_RUNNING_LIGHTS = 18,
    /**
     * @generated from protobuf enum value: QSP_TWINKLE = 19;
     */
    QSP_TWINKLE = 19,
    /**
     * @generated from protobuf enum value: QSP_TWINKLE_RANDOM = 20;
     */
    QSP_TWINKLE_RANDOM = 20,
    /**
     * @generated from protobuf enum value: QSP_TWINKLE_FADE = 21;
     */
    QSP_TWINKLE_FADE = 21,
    /**
     * @generated from protobuf enum value: QSP_TWINKLE_FADE_RANDOM = 22;
     */
    QSP_TWINKLE_FADE_RANDOM = 22,
    /**
     * @generated from protobuf enum value: QSP_SPARKLE = 23;
     */
    QSP_SPARKLE = 23,
    /**
     * @generated from protobuf enum value: QSP_FLASH_SPARKLE = 24;
     */
    QSP_FLASH_SPARKLE = 24,
    /**
     * @generated from protobuf enum value: QSP_HYPER_SPARKLE = 25;
     */
    QSP_HYPER_SPARKLE = 25,
    /**
     * @generated from protobuf enum value: QSP_STROBE = 26;
     */
    QSP_STROBE = 26,
    /**
     * @generated from protobuf enum value: QSP_STROBE_RAINBOW = 27;
     */
    QSP_STROBE_RAINBOW = 27,
    /**
     * @generated from protobuf enum value: QSP_MULTI_STROBE = 28;
     */
    QSP_MULTI_STROBE = 28,
    /**
     * @generated from protobuf enum value: QSP_BLINK_RAINBOW = 29;
     */
    QSP_BLINK_RAINBOW = 29,
    /**
     * @generated from protobuf enum value: QSP_CHASE_WHITE = 30;
     */
    QSP_CHASE_WHITE = 30,
    /**
     * @generated from protobuf enum value: QSP_CHASE_COLOR = 31;
     */
    QSP_CHASE_COLOR = 31,
    /**
     * @generated from protobuf enum value: QSP_CHASE_RANDOM = 32;
     */
    QSP_CHASE_RANDOM = 32,
    /**
     * @generated from protobuf enum value: QSP_CHASE_RAINBOW = 33;
     */
    QSP_CHASE_RAINBOW = 33,
    /**
     * @generated from protobuf enum value: QSP_CHASE_FLASH = 34;
     */
    QSP_CHASE_FLASH = 34,
    /**
     * @generated from protobuf enum value: QSP_CHASE_FLASH_RANDOM = 35;
     */
    QSP_CHASE_FLASH_RANDOM = 35,
    /**
     * @generated from protobuf enum value: QSP_CHASE_RAINBOW_WHITE = 36;
     */
    QSP_CHASE_RAINBOW_WHITE = 36,
    /**
     * @generated from protobuf enum value: QSP_CHASE_BLACKOUT = 37;
     */
    QSP_CHASE_BLACKOUT = 37,
    /**
     * @generated from protobuf enum value: QSP_CHASE_BLACKOUT_RAINBOW = 38;
     */
    QSP_CHASE_BLACKOUT_RAINBOW = 38,
    /**
     * @generated from protobuf enum value: QSP_COLOR_SWEEP_RANDOM = 39;
     */
    QSP_COLOR_SWEEP_RANDOM = 39,
    /**
     * @generated from protobuf enum value: QSP_RUNNING_COLOR = 40;
     */
    QSP_RUNNING_COLOR = 40,
    /**
     * @generated from protobuf enum value: QSP_RUNNING_RED_BLUE = 41;
     */
    QSP_RUNNING_RED_BLUE = 41,
    /**
     * @generated from protobuf enum value: QSP_RUNNING_RANDOM = 42;
     */
    QSP_RUNNING_RANDOM = 42,
    /**
     * @generated from protobuf enum value: QSP_LARSON_SCANNER = 43;
     */
    QSP_LARSON_SCANNER = 43,
    /**
     * @generated from protobuf enum value: QSP_COMET = 44;
     */
    QSP_COMET = 44,
    /**
     * @generated from protobuf enum value: QSP_FIREWORKS = 45;
     */
    QSP_FIREWORKS = 45,
    /**
     * @generated from protobuf enum value: QSP_FIREWORKS_RANDOM = 46;
     */
    QSP_FIREWORKS_RANDOM = 46,
    /**
     * @generated from protobuf enum value: QSP_MERRY_CHRISTMAS = 47;
     */
    QSP_MERRY_CHRISTMAS = 47,
    /**
     * @generated from protobuf enum value: QSP_FIRE_FLICKER = 48;
     */
    QSP_FIRE_FLICKER = 48,
    /**
     * @generated from protobuf enum value: QSP_FIRE_FLICKER_SOFT = 49;
     */
    QSP_FIRE_FLICKER_SOFT = 49,
    /**
     * @generated from protobuf enum value: QSP_FIRE_FLICKER_INTENSE = 50;
     */
    QSP_FIRE_FLICKER_INTENSE = 50,
    /**
     * @generated from protobuf enum value: QSP_CIRCUS_COMBUSTUS = 51;
     */
    QSP_CIRCUS_COMBUSTUS = 51,
    /**
     * @generated from protobuf enum value: QSP_HALLOWEEN = 52;
     */
    QSP_HALLOWEEN = 52,
    /**
     * @generated from protobuf enum value: QSP_BICOLOR_CHASE = 53;
     */
    QSP_BICOLOR_CHASE = 53,
    /**
     * @generated from protobuf enum value: QSP_TRICOLOR_CHASE = 54;
     */
    QSP_TRICOLOR_CHASE = 54,
    /**
     * @generated from protobuf enum value: QSP_TWINKLEFOX = 55;
     */
    QSP_TWINKLEFOX = 55,
    /**
     * @generated from protobuf enum value: QSP_RAIN = 56;
     */
    QSP_RAIN = 56
}
/**
 * @generated from protobuf enum QromaStrip_WS2812FX_FadeSpeed
 */
export enum QromaStrip_WS2812FX_FadeSpeed {
    /**
     * @generated from protobuf enum value: QSFS_NOT_SET = 0;
     */
    QSFS_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: QSFS_XFAST = 1;
     */
    QSFS_XFAST = 1,
    /**
     * @generated from protobuf enum value: QSFS_FAST = 2;
     */
    QSFS_FAST = 2,
    /**
     * @generated from protobuf enum value: QSFS_MEDIUM = 3;
     */
    QSFS_MEDIUM = 3,
    /**
     * @generated from protobuf enum value: QSFS_SLOW = 4;
     */
    QSFS_SLOW = 4,
    /**
     * @generated from protobuf enum value: QSFS_XSLOW = 5;
     */
    QSFS_XSLOW = 5,
    /**
     * @generated from protobuf enum value: QSFS_XXSLOW = 6;
     */
    QSFS_XXSLOW = 6,
    /**
     * @generated from protobuf enum value: QSFS_GLACIAL = 7;
     */
    QSFS_GLACIAL = 7
}
/**
 * @generated from protobuf enum QromaStrip_WS2812FX_PixelsSize
 */
export enum QromaStrip_WS2812FX_PixelsSize {
    /**
     * @generated from protobuf enum value: QSPS_NOT_SET = 0;
     */
    QSPS_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: QSPS_SMALL = 1;
     */
    QSPS_SMALL = 1,
    /**
     * @generated from protobuf enum value: QSPS_MEDIUM = 2;
     */
    QSPS_MEDIUM = 2,
    /**
     * @generated from protobuf enum value: QSPS_LARGE = 3;
     */
    QSPS_LARGE = 3,
    /**
     * @generated from protobuf enum value: QSPS_XLARGE = 4;
     */
    QSPS_XLARGE = 4
}
/**
 * @generated from protobuf enum QromaStrip_WS2812FX_NeoPixelRgbOrder
 */
export enum QromaStrip_WS2812FX_NeoPixelRgbOrder {
    /**
     * @generated from protobuf enum value: QSNPO_NOT_SET = 0;
     */
    QSNPO_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_RGB = 1;
     */
    QSNPO_NEO_RGB = 1,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_RBG = 2;
     */
    QSNPO_NEO_RBG = 2,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_GRB = 3;
     */
    QSNPO_NEO_GRB = 3,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_GBR = 4;
     */
    QSNPO_NEO_GBR = 4,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_BRG = 5;
     */
    QSNPO_NEO_BRG = 5,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_BGR = 6;
     */
    QSNPO_NEO_BGR = 6,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_WRGB = 7;
     */
    QSNPO_NEO_WRGB = 7,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_WRBG = 8;
     */
    QSNPO_NEO_WRBG = 8,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_WGRB = 9;
     */
    QSNPO_NEO_WGRB = 9,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_WGBR = 10;
     */
    QSNPO_NEO_WGBR = 10,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_WBRG = 11;
     */
    QSNPO_NEO_WBRG = 11,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_WBGR = 12;
     */
    QSNPO_NEO_WBGR = 12,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_RWGB = 13;
     */
    QSNPO_NEO_RWGB = 13,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_RWBG = 14;
     */
    QSNPO_NEO_RWBG = 14,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_RGWB = 15;
     */
    QSNPO_NEO_RGWB = 15,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_RGBW = 16;
     */
    QSNPO_NEO_RGBW = 16,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_RBWG = 17;
     */
    QSNPO_NEO_RBWG = 17,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_RBGW = 18;
     */
    QSNPO_NEO_RBGW = 18,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_GWRB = 19;
     */
    QSNPO_NEO_GWRB = 19,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_GWBR = 20;
     */
    QSNPO_NEO_GWBR = 20,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_GRWB = 21;
     */
    QSNPO_NEO_GRWB = 21,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_GRBW = 22;
     */
    QSNPO_NEO_GRBW = 22,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_GBWR = 23;
     */
    QSNPO_NEO_GBWR = 23,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_GBRW = 24;
     */
    QSNPO_NEO_GBRW = 24,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_BWRG = 25;
     */
    QSNPO_NEO_BWRG = 25,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_BWGR = 26;
     */
    QSNPO_NEO_BWGR = 26,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_BRWG = 27;
     */
    QSNPO_NEO_BRWG = 27,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_BRGW = 28;
     */
    QSNPO_NEO_BRGW = 28,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_BGWR = 29;
     */
    QSNPO_NEO_BGWR = 29,
    /**
     * @generated from protobuf enum value: QSNPO_NEO_BGRW = 30;
     */
    QSNPO_NEO_BGRW = 30
}
/**
 * @generated from protobuf enum QromaStrip_WS2812FX_NeoPixelTxRate
 */
export enum QromaStrip_WS2812FX_NeoPixelTxRate {
    /**
     * @generated from protobuf enum value: QSNPTR_NOT_SET = 0;
     */
    QSNPTR_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: QSNPTR_400_KHZ = 1;
     */
    QSNPTR_400_KHZ = 1,
    /**
     * @generated from protobuf enum value: QSNPTR_800_KHZ = 2;
     */
    QSNPTR_800_KHZ = 2
}
/**
 * @generated from protobuf enum QromaStrip_WS2812FX_StripIndex
 */
export enum QromaStrip_WS2812FX_StripIndex {
    /**
     * @generated from protobuf enum value: QSSI_NOT_SET = 0;
     */
    QSSI_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: QSSI_STRIP_01 = 1;
     */
    QSSI_STRIP_01 = 1,
    /**
     * @generated from protobuf enum value: QSSI_STRIP_02 = 2;
     */
    QSSI_STRIP_02 = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class QromaStripColor$Type extends MessageType<QromaStripColor> {
    constructor() {
        super("QromaStripColor", [
            { no: 1, name: "red", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "green", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "blue", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QromaStripColor>): QromaStripColor {
        const message = { red: 0, green: 0, blue: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStripColor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStripColor): QromaStripColor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 red */ 1:
                    message.red = reader.uint32();
                    break;
                case /* uint32 green */ 2:
                    message.green = reader.uint32();
                    break;
                case /* uint32 blue */ 3:
                    message.blue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStripColor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 red = 1; */
        if (message.red !== 0)
            writer.tag(1, WireType.Varint).uint32(message.red);
        /* uint32 green = 2; */
        if (message.green !== 0)
            writer.tag(2, WireType.Varint).uint32(message.green);
        /* uint32 blue = 3; */
        if (message.blue !== 0)
            writer.tag(3, WireType.Varint).uint32(message.blue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStripColor
 */
export const QromaStripColor = new QromaStripColor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStrip_WS2812FX_Animation$Type extends MessageType<QromaStrip_WS2812FX_Animation> {
    constructor() {
        super("QromaStrip_WS2812FX_Animation", [
            { no: 1, name: "pattern", kind: "enum", T: () => ["QromaStrip_WS2812FX_Pattern", QromaStrip_WS2812FX_Pattern] },
            { no: 2, name: "speed", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "color1", kind: "message", T: () => QromaStripColor },
            { no: 4, name: "color2", kind: "message", T: () => QromaStripColor },
            { no: 5, name: "color3", kind: "message", T: () => QromaStripColor },
            { no: 6, name: "reversed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "fadeSpeed", kind: "enum", T: () => ["QromaStrip_WS2812FX_FadeSpeed", QromaStrip_WS2812FX_FadeSpeed] },
            { no: 8, name: "size", kind: "enum", T: () => ["QromaStrip_WS2812FX_PixelsSize", QromaStrip_WS2812FX_PixelsSize] },
            { no: 9, name: "useGammaCorrection", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<QromaStrip_WS2812FX_Animation>): QromaStrip_WS2812FX_Animation {
        const message = { pattern: 0, speed: 0, reversed: false, fadeSpeed: 0, size: 0, useGammaCorrection: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStrip_WS2812FX_Animation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStrip_WS2812FX_Animation): QromaStrip_WS2812FX_Animation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_Pattern pattern */ 1:
                    message.pattern = reader.int32();
                    break;
                case /* uint32 speed */ 2:
                    message.speed = reader.uint32();
                    break;
                case /* QromaStripColor color1 */ 3:
                    message.color1 = QromaStripColor.internalBinaryRead(reader, reader.uint32(), options, message.color1);
                    break;
                case /* QromaStripColor color2 */ 4:
                    message.color2 = QromaStripColor.internalBinaryRead(reader, reader.uint32(), options, message.color2);
                    break;
                case /* QromaStripColor color3 */ 5:
                    message.color3 = QromaStripColor.internalBinaryRead(reader, reader.uint32(), options, message.color3);
                    break;
                case /* bool reversed */ 6:
                    message.reversed = reader.bool();
                    break;
                case /* QromaStrip_WS2812FX_FadeSpeed fadeSpeed */ 7:
                    message.fadeSpeed = reader.int32();
                    break;
                case /* QromaStrip_WS2812FX_PixelsSize size */ 8:
                    message.size = reader.int32();
                    break;
                case /* bool useGammaCorrection */ 9:
                    message.useGammaCorrection = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStrip_WS2812FX_Animation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_Pattern pattern = 1; */
        if (message.pattern !== 0)
            writer.tag(1, WireType.Varint).int32(message.pattern);
        /* uint32 speed = 2; */
        if (message.speed !== 0)
            writer.tag(2, WireType.Varint).uint32(message.speed);
        /* QromaStripColor color1 = 3; */
        if (message.color1)
            QromaStripColor.internalBinaryWrite(message.color1, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* QromaStripColor color2 = 4; */
        if (message.color2)
            QromaStripColor.internalBinaryWrite(message.color2, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* QromaStripColor color3 = 5; */
        if (message.color3)
            QromaStripColor.internalBinaryWrite(message.color3, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool reversed = 6; */
        if (message.reversed !== false)
            writer.tag(6, WireType.Varint).bool(message.reversed);
        /* QromaStrip_WS2812FX_FadeSpeed fadeSpeed = 7; */
        if (message.fadeSpeed !== 0)
            writer.tag(7, WireType.Varint).int32(message.fadeSpeed);
        /* QromaStrip_WS2812FX_PixelsSize size = 8; */
        if (message.size !== 0)
            writer.tag(8, WireType.Varint).int32(message.size);
        /* bool useGammaCorrection = 9; */
        if (message.useGammaCorrection !== false)
            writer.tag(9, WireType.Varint).bool(message.useGammaCorrection);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStrip_WS2812FX_Animation
 */
export const QromaStrip_WS2812FX_Animation = new QromaStrip_WS2812FX_Animation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStrip_WS2812FX_IoSettings$Type extends MessageType<QromaStrip_WS2812FX_IoSettings> {
    constructor() {
        super("QromaStrip_WS2812FX_IoSettings", [
            { no: 1, name: "pin", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "ledCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "neoPixelRgbOrder", kind: "enum", T: () => ["QromaStrip_WS2812FX_NeoPixelRgbOrder", QromaStrip_WS2812FX_NeoPixelRgbOrder] },
            { no: 4, name: "neoPixelTxRate", kind: "enum", T: () => ["QromaStrip_WS2812FX_NeoPixelTxRate", QromaStrip_WS2812FX_NeoPixelTxRate] }
        ]);
    }
    create(value?: PartialMessage<QromaStrip_WS2812FX_IoSettings>): QromaStrip_WS2812FX_IoSettings {
        const message = { pin: 0, ledCount: 0, neoPixelRgbOrder: 0, neoPixelTxRate: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStrip_WS2812FX_IoSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStrip_WS2812FX_IoSettings): QromaStrip_WS2812FX_IoSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 pin */ 1:
                    message.pin = reader.uint32();
                    break;
                case /* uint32 ledCount */ 2:
                    message.ledCount = reader.uint32();
                    break;
                case /* QromaStrip_WS2812FX_NeoPixelRgbOrder neoPixelRgbOrder */ 3:
                    message.neoPixelRgbOrder = reader.int32();
                    break;
                case /* QromaStrip_WS2812FX_NeoPixelTxRate neoPixelTxRate */ 4:
                    message.neoPixelTxRate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStrip_WS2812FX_IoSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 pin = 1; */
        if (message.pin !== 0)
            writer.tag(1, WireType.Varint).uint32(message.pin);
        /* uint32 ledCount = 2; */
        if (message.ledCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.ledCount);
        /* QromaStrip_WS2812FX_NeoPixelRgbOrder neoPixelRgbOrder = 3; */
        if (message.neoPixelRgbOrder !== 0)
            writer.tag(3, WireType.Varint).int32(message.neoPixelRgbOrder);
        /* QromaStrip_WS2812FX_NeoPixelTxRate neoPixelTxRate = 4; */
        if (message.neoPixelTxRate !== 0)
            writer.tag(4, WireType.Varint).int32(message.neoPixelTxRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStrip_WS2812FX_IoSettings
 */
export const QromaStrip_WS2812FX_IoSettings = new QromaStrip_WS2812FX_IoSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStrip_WS2812FX_Segment$Type extends MessageType<QromaStrip_WS2812FX_Segment> {
    constructor() {
        super("QromaStrip_WS2812FX_Segment", [
            { no: 1, name: "startIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "endIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QromaStrip_WS2812FX_Segment>): QromaStrip_WS2812FX_Segment {
        const message = { startIndex: 0, endIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStrip_WS2812FX_Segment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStrip_WS2812FX_Segment): QromaStrip_WS2812FX_Segment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 startIndex */ 1:
                    message.startIndex = reader.uint32();
                    break;
                case /* uint32 endIndex */ 2:
                    message.endIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStrip_WS2812FX_Segment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 startIndex = 1; */
        if (message.startIndex !== 0)
            writer.tag(1, WireType.Varint).uint32(message.startIndex);
        /* uint32 endIndex = 2; */
        if (message.endIndex !== 0)
            writer.tag(2, WireType.Varint).uint32(message.endIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStrip_WS2812FX_Segment
 */
export const QromaStrip_WS2812FX_Segment = new QromaStrip_WS2812FX_Segment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStrip_WS2812FX_SegmentsDefinition$Type extends MessageType<QromaStrip_WS2812FX_SegmentsDefinition> {
    constructor() {
        super("QromaStrip_WS2812FX_SegmentsDefinition", [
            { no: 1, name: "brightness", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "numSegments", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "maxNumSegments", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "segments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QromaStrip_WS2812FX_Segment }
        ]);
    }
    create(value?: PartialMessage<QromaStrip_WS2812FX_SegmentsDefinition>): QromaStrip_WS2812FX_SegmentsDefinition {
        const message = { brightness: 0, numSegments: 0, maxNumSegments: 0, segments: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStrip_WS2812FX_SegmentsDefinition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStrip_WS2812FX_SegmentsDefinition): QromaStrip_WS2812FX_SegmentsDefinition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 brightness */ 1:
                    message.brightness = reader.uint32();
                    break;
                case /* uint32 numSegments */ 2:
                    message.numSegments = reader.uint32();
                    break;
                case /* uint32 maxNumSegments */ 3:
                    message.maxNumSegments = reader.uint32();
                    break;
                case /* repeated QromaStrip_WS2812FX_Segment segments */ 4:
                    message.segments.push(QromaStrip_WS2812FX_Segment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStrip_WS2812FX_SegmentsDefinition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 brightness = 1; */
        if (message.brightness !== 0)
            writer.tag(1, WireType.Varint).uint32(message.brightness);
        /* uint32 numSegments = 2; */
        if (message.numSegments !== 0)
            writer.tag(2, WireType.Varint).uint32(message.numSegments);
        /* uint32 maxNumSegments = 3; */
        if (message.maxNumSegments !== 0)
            writer.tag(3, WireType.Varint).uint32(message.maxNumSegments);
        /* repeated QromaStrip_WS2812FX_Segment segments = 4; */
        for (let i = 0; i < message.segments.length; i++)
            QromaStrip_WS2812FX_Segment.internalBinaryWrite(message.segments[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStrip_WS2812FX_SegmentsDefinition
 */
export const QromaStrip_WS2812FX_SegmentsDefinition = new QromaStrip_WS2812FX_SegmentsDefinition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStrip_WS2812FX_StartupAnimations$Type extends MessageType<QromaStrip_WS2812FX_StartupAnimations> {
    constructor() {
        super("QromaStrip_WS2812FX_StartupAnimations", [
            { no: 1, name: "startupDelayInMs", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "segmentAnimations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QromaStrip_WS2812FX_Animation }
        ]);
    }
    create(value?: PartialMessage<QromaStrip_WS2812FX_StartupAnimations>): QromaStrip_WS2812FX_StartupAnimations {
        const message = { startupDelayInMs: 0, segmentAnimations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStrip_WS2812FX_StartupAnimations>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStrip_WS2812FX_StartupAnimations): QromaStrip_WS2812FX_StartupAnimations {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 startupDelayInMs */ 1:
                    message.startupDelayInMs = reader.uint32();
                    break;
                case /* repeated QromaStrip_WS2812FX_Animation segmentAnimations */ 2:
                    message.segmentAnimations.push(QromaStrip_WS2812FX_Animation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStrip_WS2812FX_StartupAnimations, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 startupDelayInMs = 1; */
        if (message.startupDelayInMs !== 0)
            writer.tag(1, WireType.Varint).uint32(message.startupDelayInMs);
        /* repeated QromaStrip_WS2812FX_Animation segmentAnimations = 2; */
        for (let i = 0; i < message.segmentAnimations.length; i++)
            QromaStrip_WS2812FX_Animation.internalBinaryWrite(message.segmentAnimations[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStrip_WS2812FX_StartupAnimations
 */
export const QromaStrip_WS2812FX_StartupAnimations = new QromaStrip_WS2812FX_StartupAnimations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStripConfig$Type extends MessageType<QromaStripConfig> {
    constructor() {
        super("QromaStripConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ioSettings", kind: "message", T: () => QromaStrip_WS2812FX_IoSettings },
            { no: 3, name: "segmentsDefinition", kind: "message", T: () => QromaStrip_WS2812FX_SegmentsDefinition },
            { no: 4, name: "startupAnimations", kind: "message", T: () => QromaStrip_WS2812FX_StartupAnimations }
        ]);
    }
    create(value?: PartialMessage<QromaStripConfig>): QromaStripConfig {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStripConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStripConfig): QromaStripConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* QromaStrip_WS2812FX_IoSettings ioSettings */ 2:
                    message.ioSettings = QromaStrip_WS2812FX_IoSettings.internalBinaryRead(reader, reader.uint32(), options, message.ioSettings);
                    break;
                case /* QromaStrip_WS2812FX_SegmentsDefinition segmentsDefinition */ 3:
                    message.segmentsDefinition = QromaStrip_WS2812FX_SegmentsDefinition.internalBinaryRead(reader, reader.uint32(), options, message.segmentsDefinition);
                    break;
                case /* QromaStrip_WS2812FX_StartupAnimations startupAnimations */ 4:
                    message.startupAnimations = QromaStrip_WS2812FX_StartupAnimations.internalBinaryRead(reader, reader.uint32(), options, message.startupAnimations);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStripConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* QromaStrip_WS2812FX_IoSettings ioSettings = 2; */
        if (message.ioSettings)
            QromaStrip_WS2812FX_IoSettings.internalBinaryWrite(message.ioSettings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* QromaStrip_WS2812FX_SegmentsDefinition segmentsDefinition = 3; */
        if (message.segmentsDefinition)
            QromaStrip_WS2812FX_SegmentsDefinition.internalBinaryWrite(message.segmentsDefinition, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* QromaStrip_WS2812FX_StartupAnimations startupAnimations = 4; */
        if (message.startupAnimations)
            QromaStrip_WS2812FX_StartupAnimations.internalBinaryWrite(message.startupAnimations, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStripConfig
 */
export const QromaStripConfig = new QromaStripConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaLightsConfig$Type extends MessageType<QromaLightsConfig> {
    constructor() {
        super("QromaLightsConfig", [
            { no: 1, name: "qromaStrip1Config", kind: "message", T: () => QromaStripConfig },
            { no: 2, name: "qromaStrip2Config", kind: "message", T: () => QromaStripConfig }
        ]);
    }
    create(value?: PartialMessage<QromaLightsConfig>): QromaLightsConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaLightsConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaLightsConfig): QromaLightsConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStripConfig qromaStrip1Config */ 1:
                    message.qromaStrip1Config = QromaStripConfig.internalBinaryRead(reader, reader.uint32(), options, message.qromaStrip1Config);
                    break;
                case /* QromaStripConfig qromaStrip2Config */ 2:
                    message.qromaStrip2Config = QromaStripConfig.internalBinaryRead(reader, reader.uint32(), options, message.qromaStrip2Config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaLightsConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStripConfig qromaStrip1Config = 1; */
        if (message.qromaStrip1Config)
            QromaStripConfig.internalBinaryWrite(message.qromaStrip1Config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* QromaStripConfig qromaStrip2Config = 2; */
        if (message.qromaStrip2Config)
            QromaStripConfig.internalBinaryWrite(message.qromaStrip2Config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaLightsConfig
 */
export const QromaLightsConfig = new QromaLightsConfig$Type();
