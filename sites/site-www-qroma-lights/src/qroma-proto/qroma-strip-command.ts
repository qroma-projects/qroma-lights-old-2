// @generated by protobuf-ts 2.8.2 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-strip-command.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { QromaStrip_WS2812FX_IoSettings } from "./qroma-lights-types";
import { QromaStrip_WS2812FX_Animation } from "./qroma-lights-types";
import { QromaStrip_WS2812FX_Segment } from "./qroma-lights-types";
import { QromaStrip_WS2812FX_StripIndex } from "./qroma-lights-types";
// enum QromaStrip_WS2812FX_Pattern {//   QSP_STATIC                 =  0;//   QSP_BLINK                  =  1;//   QSP_BREATH                 =  2;//   QSP_COLOR_WIPE             =  3;//   QSP_COLOR_WIPE_INV         =  4;//   QSP_COLOR_WIPE_REV         =  5;//   QSP_COLOR_WIPE_REV_INV     =  6;//   QSP_COLOR_WIPE_RANDOM      =  7;//   QSP_RANDOM_COLOR           =  8;//   QSP_SINGLE_DYNAMIC         =  9;//   QSP_MULTI_DYNAMIC          = 10;//   QSP_RAINBOW                = 11;//   QSP_RAINBOW_CYCLE          = 12;//   QSP_SCAN                   = 13;//   QSP_DUAL_SCAN              = 14;//   QSP_FADE                   = 15;//   QSP_THEATER_CHASE          = 16;//   QSP_THEATER_CHASE_RAINBOW  = 17;//   QSP_RUNNING_LIGHTS         = 18;//   QSP_TWINKLE                = 19;//   QSP_TWINKLE_RANDOM         = 20;//   QSP_TWINKLE_FADE           = 21;//   QSP_TWINKLE_FADE_RANDOM    = 22;//   QSP_SPARKLE                = 23;//   QSP_FLASH_SPARKLE          = 24;//   QSP_HYPER_SPARKLE          = 25;//   QSP_STROBE                 = 26;//   QSP_STROBE_RAINBOW         = 27;//   QSP_MULTI_STROBE           = 28;//   QSP_BLINK_RAINBOW          = 29;//   QSP_CHASE_WHITE            = 30;//   QSP_CHASE_COLOR            = 31;//   QSP_CHASE_RANDOM           = 32;//   QSP_CHASE_RAINBOW          = 33;//   QSP_CHASE_FLASH            = 34;//   QSP_CHASE_FLASH_RANDOM     = 35;//   QSP_CHASE_RAINBOW_WHITE    = 36;//   QSP_CHASE_BLACKOUT         = 37;//   QSP_CHASE_BLACKOUT_RAINBOW = 38;//   QSP_COLOR_SWEEP_RANDOM     = 39;//   QSP_RUNNING_COLOR          = 40;//   QSP_RUNNING_RED_BLUE       = 41;//   QSP_RUNNING_RANDOM         = 42;//   QSP_LARSON_SCANNER         = 43;//   QSP_COMET                  = 44;//   QSP_FIREWORKS              = 45;//   QSP_FIREWORKS_RANDOM       = 46;//   QSP_MERRY_CHRISTMAS        = 47;//   QSP_FIRE_FLICKER           = 48;//   QSP_FIRE_FLICKER_SOFT      = 49;//   QSP_FIRE_FLICKER_INTENSE   = 50;//   QSP_CIRCUS_COMBUSTUS       = 51;//   QSP_HALLOWEEN              = 52;//   QSP_BICOLOR_CHASE          = 53;//   QSP_TRICOLOR_CHASE         = 54;//   QSP_TWINKLEFOX             = 55;//   QSP_RAIN                   = 56;  // }

// enum QromaStrip_WS2812FX_FadeSpeed {//   QSFS_NOT_SET = 0;//   QSFS_XFAST   = 1;//   QSFS_FAST    = 2;//   QSFS_MEDIUM  = 3;//   QSFS_SLOW    = 4;//   QSFS_XSLOW   = 5;//   QSFS_XXSLOW  = 6;//   QSFS_GLACIAL = 7;// }

// enum QromaStrip_WS2812FX_PixelsSize {//   QSPS_NOT_SET = 0;//   QSPS_SMALL   = 1;//   QSPS_MEDIUM  = 2;//   QSPS_LARGE   = 3;//   QSPS_XLARGE  = 4;// }

// enum QromaStrip_WS2812FX_NeoPixelRgbOrder {//   QSNPO_NOT_SET =   0;

//   QSNPO_NEO_RGB =   1;//   QSNPO_NEO_RBG =   2;//   QSNPO_NEO_GRB =   3;//   QSNPO_NEO_GBR =   4;//   QSNPO_NEO_BRG =   5;//   QSNPO_NEO_BGR =   6;

//   QSNPO_NEO_WRGB =  7;//   QSNPO_NEO_WRBG =  8;//   QSNPO_NEO_WGRB =  9;//   QSNPO_NEO_WGBR = 10;//   QSNPO_NEO_WBRG = 11;//   QSNPO_NEO_WBGR = 12;

//   QSNPO_NEO_RWGB = 13;//   QSNPO_NEO_RWBG = 14;//   QSNPO_NEO_RGWB = 15;//   QSNPO_NEO_RGBW = 16;//   QSNPO_NEO_RBWG = 17;//   QSNPO_NEO_RBGW = 18;

//   QSNPO_NEO_GWRB = 19;//   QSNPO_NEO_GWBR = 20;//   QSNPO_NEO_GRWB = 21;//   QSNPO_NEO_GRBW = 22;//   QSNPO_NEO_GBWR = 23;//   QSNPO_NEO_GBRW = 24;

//   QSNPO_NEO_BWRG = 25;//   QSNPO_NEO_BWGR = 26;//   QSNPO_NEO_BRWG = 27;//   QSNPO_NEO_BRGW = 28;//   QSNPO_NEO_BGWR = 29;//   QSNPO_NEO_BGRW = 30;// }

// enum QromaStrip_WS2812FX_NeoPixelTxRate {//   QSNPTR_NOT_SET =   0;//   QSNPTR_400_KHZ =   1;//   QSNPTR_800_KHZ =   2;// }

// enum QromaStrip_WS2812FX_StripIndex {//   QSSI_NOT_SET  =  0;//   QSSI_STRIP_01 =  1;//   QSSI_STRIP_02 =  2;// }

// message QromaStripColor {//   uint32 red = 1;//   uint32 green = 2;//   uint32 blue = 3;// }

// message QromaStrip_WS2812FX_Animation {//   QromaStrip_WS2812FX_Pattern pattern = 1;//   uint32 speed = 2;       // 2-65535//   // bytes threeSetsOfColorRgbBytes = 3;//   QromaStripColor color1 = 3;//   QromaStripColor color2 = 4;//   QromaStripColor color3 = 5;//   bool reversed = 6;//   QromaStrip_WS2812FX_FadeSpeed fadeSpeed = 7;//   QromaStrip_WS2812FX_PixelsSize size = 8;//   bool useGammaCorrection = 9;// }

// message QromaPoint_WS2812FX_IoSettings {//   uint32 pin = 1;//   uint32 ledCount = 2;//   QromaStrip_WS2812FX_NeoPixelRgbOrder neoPixelRgbOrder = 3;//   QromaStrip_WS2812FX_NeoPixelTxRate neoPixelTxRate = 4;// }

// message QromaStrip_WS2812FX_Segment {//   uint32 startIndex = 1;//   uint32 endIndex = 2;// }

// message QromaStrip_WS2812FX_SegmentDefinitions {//   uint32 brightness = 1;//   uint32 numSegments = 2;//   uint32 maxNumSegments = 3;//   repeated QromaStrip_WS2812FX_Segment segments = 4;//   // repeated QromaStrip_WS2812FX_Animation segmentAnimations = 5;// }

// message QromaStrip_Config {//   QromaPoint_WS2812FX_IoSettings ioSettings = 1;//   // QromaStrip_WS2812FX_LedsConfig startupLedsConfig = 2;//   QromaStrip_WS2812FX_SegmentDefinitions segments = 2;// }

/**
 * @generated from protobuf message SetQromaStrip_WS2812FX_Segments
 */
export interface SetQromaStrip_WS2812FX_Segments {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 1;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
    /**
     * @generated from protobuf field: uint32 numSegments = 2;
     */
    numSegments: number;
    /**
     * @generated from protobuf field: repeated QromaStrip_WS2812FX_Segment segments = 3;
     */
    segments: QromaStrip_WS2812FX_Segment[]; // repeated QromaStrip_WS2812FX_Animation animations = 4;}
/**
 * @generated from protobuf message SetQromaStrip_WS2812FX_SegmentAnimation
 */
export interface SetQromaStrip_WS2812FX_SegmentAnimation {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_Animation animation = 1;
     */
    animation?: QromaStrip_WS2812FX_Animation;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 2;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
    /**
     * @generated from protobuf field: uint32 segmentIndex = 3;
     */
    segmentIndex: number;
}
/**
 * @generated from protobuf message SetQromaStrip_WS2812FX_Brightness
 */
export interface SetQromaStrip_WS2812FX_Brightness {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 1;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
    /**
     * @generated from protobuf field: uint32 brightness = 2;
     */
    brightness: number; // 0-255}
/**
 * @generated from protobuf message SetQromaStrip_WS2812FX_IoSettings
 */
export interface SetQromaStrip_WS2812FX_IoSettings {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 1;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_IoSettings settings = 2;
     */
    settings?: QromaStrip_WS2812FX_IoSettings;
}
/**
 * @generated from protobuf message SaveQromaStrip_CurrentState
 */
export interface SaveQromaStrip_CurrentState {
    /**
     * @generated from protobuf field: QromaStrip_WS2812FX_StripIndex stripIndex = 1;
     */
    stripIndex: QromaStrip_WS2812FX_StripIndex;
}
/**
 * @generated from protobuf message QromaStripCommand
 */
export interface QromaStripCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "setQromaStripBrightness";
        /**
         * @generated from protobuf field: SetQromaStrip_WS2812FX_Brightness setQromaStripBrightness = 1;
         */
        setQromaStripBrightness: SetQromaStrip_WS2812FX_Brightness;
    } | {
        oneofKind: "setQromaStripSegmentAnimation";
        /**
         * @generated from protobuf field: SetQromaStrip_WS2812FX_SegmentAnimation setQromaStripSegmentAnimation = 2;
         */
        setQromaStripSegmentAnimation: SetQromaStrip_WS2812FX_SegmentAnimation;
    } | {
        oneofKind: "setQromaStripSegments";
        /**
         * @generated from protobuf field: SetQromaStrip_WS2812FX_Segments setQromaStripSegments = 3;
         */
        setQromaStripSegments: SetQromaStrip_WS2812FX_Segments;
    } | {
        oneofKind: "setQromaStripIoSettings";
        /**
         * @generated from protobuf field: SetQromaStrip_WS2812FX_IoSettings setQromaStripIoSettings = 4;
         */
        setQromaStripIoSettings: SetQromaStrip_WS2812FX_IoSettings;
    } | {
        oneofKind: "saveQromaStripCurrentState";
        /**
         * @generated from protobuf field: SaveQromaStrip_CurrentState saveQromaStripCurrentState = 5;
         */
        saveQromaStripCurrentState: SaveQromaStrip_CurrentState;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message QromaStripResponse
 */
export interface QromaStripResponse {
}
/**
 * @generated from protobuf message QromaStrip_Status
 */
export interface QromaStrip_Status {
    /**
     * @generated from protobuf field: uint32 lastConfigChangeTimeInMs = 1;
     */
    lastConfigChangeTimeInMs: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaStrip_WS2812FX_Segments$Type extends MessageType<SetQromaStrip_WS2812FX_Segments> {
    constructor() {
        super("SetQromaStrip_WS2812FX_Segments", [
            { no: 1, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] },
            { no: 2, name: "numSegments", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "segments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QromaStrip_WS2812FX_Segment }
        ]);
    }
    create(value?: PartialMessage<SetQromaStrip_WS2812FX_Segments>): SetQromaStrip_WS2812FX_Segments {
        const message = { stripIndex: 0, numSegments: 0, segments: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetQromaStrip_WS2812FX_Segments>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaStrip_WS2812FX_Segments): SetQromaStrip_WS2812FX_Segments {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 1:
                    message.stripIndex = reader.int32();
                    break;
                case /* uint32 numSegments */ 2:
                    message.numSegments = reader.uint32();
                    break;
                case /* repeated QromaStrip_WS2812FX_Segment segments */ 3:
                    message.segments.push(QromaStrip_WS2812FX_Segment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaStrip_WS2812FX_Segments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 1; */
        if (message.stripIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.stripIndex);
        /* uint32 numSegments = 2; */
        if (message.numSegments !== 0)
            writer.tag(2, WireType.Varint).uint32(message.numSegments);
        /* repeated QromaStrip_WS2812FX_Segment segments = 3; */
        for (let i = 0; i < message.segments.length; i++)
            QromaStrip_WS2812FX_Segment.internalBinaryWrite(message.segments[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaStrip_WS2812FX_Segments
 */
export const SetQromaStrip_WS2812FX_Segments = new SetQromaStrip_WS2812FX_Segments$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaStrip_WS2812FX_SegmentAnimation$Type extends MessageType<SetQromaStrip_WS2812FX_SegmentAnimation> {
    constructor() {
        super("SetQromaStrip_WS2812FX_SegmentAnimation", [
            { no: 1, name: "animation", kind: "message", T: () => QromaStrip_WS2812FX_Animation },
            { no: 2, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] },
            { no: 3, name: "segmentIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetQromaStrip_WS2812FX_SegmentAnimation>): SetQromaStrip_WS2812FX_SegmentAnimation {
        const message = { stripIndex: 0, segmentIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetQromaStrip_WS2812FX_SegmentAnimation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaStrip_WS2812FX_SegmentAnimation): SetQromaStrip_WS2812FX_SegmentAnimation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_Animation animation */ 1:
                    message.animation = QromaStrip_WS2812FX_Animation.internalBinaryRead(reader, reader.uint32(), options, message.animation);
                    break;
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 2:
                    message.stripIndex = reader.int32();
                    break;
                case /* uint32 segmentIndex */ 3:
                    message.segmentIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaStrip_WS2812FX_SegmentAnimation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_Animation animation = 1; */
        if (message.animation)
            QromaStrip_WS2812FX_Animation.internalBinaryWrite(message.animation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 2; */
        if (message.stripIndex !== 0)
            writer.tag(2, WireType.Varint).int32(message.stripIndex);
        /* uint32 segmentIndex = 3; */
        if (message.segmentIndex !== 0)
            writer.tag(3, WireType.Varint).uint32(message.segmentIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaStrip_WS2812FX_SegmentAnimation
 */
export const SetQromaStrip_WS2812FX_SegmentAnimation = new SetQromaStrip_WS2812FX_SegmentAnimation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaStrip_WS2812FX_Brightness$Type extends MessageType<SetQromaStrip_WS2812FX_Brightness> {
    constructor() {
        super("SetQromaStrip_WS2812FX_Brightness", [
            { no: 1, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] },
            { no: 2, name: "brightness", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetQromaStrip_WS2812FX_Brightness>): SetQromaStrip_WS2812FX_Brightness {
        const message = { stripIndex: 0, brightness: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetQromaStrip_WS2812FX_Brightness>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaStrip_WS2812FX_Brightness): SetQromaStrip_WS2812FX_Brightness {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 1:
                    message.stripIndex = reader.int32();
                    break;
                case /* uint32 brightness */ 2:
                    message.brightness = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaStrip_WS2812FX_Brightness, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 1; */
        if (message.stripIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.stripIndex);
        /* uint32 brightness = 2; */
        if (message.brightness !== 0)
            writer.tag(2, WireType.Varint).uint32(message.brightness);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaStrip_WS2812FX_Brightness
 */
export const SetQromaStrip_WS2812FX_Brightness = new SetQromaStrip_WS2812FX_Brightness$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQromaStrip_WS2812FX_IoSettings$Type extends MessageType<SetQromaStrip_WS2812FX_IoSettings> {
    constructor() {
        super("SetQromaStrip_WS2812FX_IoSettings", [
            { no: 1, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] },
            { no: 2, name: "settings", kind: "message", T: () => QromaStrip_WS2812FX_IoSettings }
        ]);
    }
    create(value?: PartialMessage<SetQromaStrip_WS2812FX_IoSettings>): SetQromaStrip_WS2812FX_IoSettings {
        const message = { stripIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetQromaStrip_WS2812FX_IoSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQromaStrip_WS2812FX_IoSettings): SetQromaStrip_WS2812FX_IoSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 1:
                    message.stripIndex = reader.int32();
                    break;
                case /* QromaStrip_WS2812FX_IoSettings settings */ 2:
                    message.settings = QromaStrip_WS2812FX_IoSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQromaStrip_WS2812FX_IoSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 1; */
        if (message.stripIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.stripIndex);
        /* QromaStrip_WS2812FX_IoSettings settings = 2; */
        if (message.settings)
            QromaStrip_WS2812FX_IoSettings.internalBinaryWrite(message.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetQromaStrip_WS2812FX_IoSettings
 */
export const SetQromaStrip_WS2812FX_IoSettings = new SetQromaStrip_WS2812FX_IoSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveQromaStrip_CurrentState$Type extends MessageType<SaveQromaStrip_CurrentState> {
    constructor() {
        super("SaveQromaStrip_CurrentState", [
            { no: 1, name: "stripIndex", kind: "enum", T: () => ["QromaStrip_WS2812FX_StripIndex", QromaStrip_WS2812FX_StripIndex] }
        ]);
    }
    create(value?: PartialMessage<SaveQromaStrip_CurrentState>): SaveQromaStrip_CurrentState {
        const message = { stripIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SaveQromaStrip_CurrentState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveQromaStrip_CurrentState): SaveQromaStrip_CurrentState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaStrip_WS2812FX_StripIndex stripIndex */ 1:
                    message.stripIndex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveQromaStrip_CurrentState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaStrip_WS2812FX_StripIndex stripIndex = 1; */
        if (message.stripIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.stripIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SaveQromaStrip_CurrentState
 */
export const SaveQromaStrip_CurrentState = new SaveQromaStrip_CurrentState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStripCommand$Type extends MessageType<QromaStripCommand> {
    constructor() {
        super("QromaStripCommand", [
            { no: 1, name: "setQromaStripBrightness", kind: "message", oneof: "command", T: () => SetQromaStrip_WS2812FX_Brightness },
            { no: 2, name: "setQromaStripSegmentAnimation", kind: "message", oneof: "command", T: () => SetQromaStrip_WS2812FX_SegmentAnimation },
            { no: 3, name: "setQromaStripSegments", kind: "message", oneof: "command", T: () => SetQromaStrip_WS2812FX_Segments },
            { no: 4, name: "setQromaStripIoSettings", kind: "message", oneof: "command", T: () => SetQromaStrip_WS2812FX_IoSettings },
            { no: 5, name: "saveQromaStripCurrentState", kind: "message", oneof: "command", T: () => SaveQromaStrip_CurrentState }
        ]);
    }
    create(value?: PartialMessage<QromaStripCommand>): QromaStripCommand {
        const message = { command: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStripCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStripCommand): QromaStripCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SetQromaStrip_WS2812FX_Brightness setQromaStripBrightness */ 1:
                    message.command = {
                        oneofKind: "setQromaStripBrightness",
                        setQromaStripBrightness: SetQromaStrip_WS2812FX_Brightness.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaStripBrightness)
                    };
                    break;
                case /* SetQromaStrip_WS2812FX_SegmentAnimation setQromaStripSegmentAnimation */ 2:
                    message.command = {
                        oneofKind: "setQromaStripSegmentAnimation",
                        setQromaStripSegmentAnimation: SetQromaStrip_WS2812FX_SegmentAnimation.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaStripSegmentAnimation)
                    };
                    break;
                case /* SetQromaStrip_WS2812FX_Segments setQromaStripSegments */ 3:
                    message.command = {
                        oneofKind: "setQromaStripSegments",
                        setQromaStripSegments: SetQromaStrip_WS2812FX_Segments.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaStripSegments)
                    };
                    break;
                case /* SetQromaStrip_WS2812FX_IoSettings setQromaStripIoSettings */ 4:
                    message.command = {
                        oneofKind: "setQromaStripIoSettings",
                        setQromaStripIoSettings: SetQromaStrip_WS2812FX_IoSettings.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setQromaStripIoSettings)
                    };
                    break;
                case /* SaveQromaStrip_CurrentState saveQromaStripCurrentState */ 5:
                    message.command = {
                        oneofKind: "saveQromaStripCurrentState",
                        saveQromaStripCurrentState: SaveQromaStrip_CurrentState.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).saveQromaStripCurrentState)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStripCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SetQromaStrip_WS2812FX_Brightness setQromaStripBrightness = 1; */
        if (message.command.oneofKind === "setQromaStripBrightness")
            SetQromaStrip_WS2812FX_Brightness.internalBinaryWrite(message.command.setQromaStripBrightness, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaStrip_WS2812FX_SegmentAnimation setQromaStripSegmentAnimation = 2; */
        if (message.command.oneofKind === "setQromaStripSegmentAnimation")
            SetQromaStrip_WS2812FX_SegmentAnimation.internalBinaryWrite(message.command.setQromaStripSegmentAnimation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaStrip_WS2812FX_Segments setQromaStripSegments = 3; */
        if (message.command.oneofKind === "setQromaStripSegments")
            SetQromaStrip_WS2812FX_Segments.internalBinaryWrite(message.command.setQromaStripSegments, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* SetQromaStrip_WS2812FX_IoSettings setQromaStripIoSettings = 4; */
        if (message.command.oneofKind === "setQromaStripIoSettings")
            SetQromaStrip_WS2812FX_IoSettings.internalBinaryWrite(message.command.setQromaStripIoSettings, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* SaveQromaStrip_CurrentState saveQromaStripCurrentState = 5; */
        if (message.command.oneofKind === "saveQromaStripCurrentState")
            SaveQromaStrip_CurrentState.internalBinaryWrite(message.command.saveQromaStripCurrentState, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStripCommand
 */
export const QromaStripCommand = new QromaStripCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStripResponse$Type extends MessageType<QromaStripResponse> {
    constructor() {
        super("QromaStripResponse", []);
    }
    create(value?: PartialMessage<QromaStripResponse>): QromaStripResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStripResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStripResponse): QromaStripResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QromaStripResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStripResponse
 */
export const QromaStripResponse = new QromaStripResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaStrip_Status$Type extends MessageType<QromaStrip_Status> {
    constructor() {
        super("QromaStrip_Status", [
            { no: 1, name: "lastConfigChangeTimeInMs", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QromaStrip_Status>): QromaStrip_Status {
        const message = { lastConfigChangeTimeInMs: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QromaStrip_Status>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaStrip_Status): QromaStrip_Status {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 lastConfigChangeTimeInMs */ 1:
                    message.lastConfigChangeTimeInMs = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaStrip_Status, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 lastConfigChangeTimeInMs = 1; */
        if (message.lastConfigChangeTimeInMs !== 0)
            writer.tag(1, WireType.Varint).uint32(message.lastConfigChangeTimeInMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaStrip_Status
 */
export const QromaStrip_Status = new QromaStrip_Status$Type();
